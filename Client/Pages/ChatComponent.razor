
<div class="d-flex flex-grow-1 flex-row">
    @if (IsDataLoading)
    {
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="100%" />
    }
    else
    {
        <MudPaper Elevation="25" Class="py-4 flex-grow-1">




            @if (!IsUserRegistered)
            {
                <div class="d-flex flex-column px-4" style="max-height:65vh;min-height:65vh; overflow:scroll;">
                    <MudText>Welcome! Enter a name to continue.</MudText>
                    <br />
                    <MudTextField @bind-Value="@UserName" Immediate="true" />
                    <br/>
                    <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Outlined.Save" ButtonType="ButtonType.Button" Disabled="@(string.IsNullOrEmpty(UserName))" OnClick="@(()=> IsUserRegistered = true)">Continue</MudButton>
                </div>

            }
            else
            {





                <div class="d-flex flex-column px-4" style="max-height:65vh;min-height:65vh; overflow:scroll;">
                    @foreach (var message in AllMessages)
                    {
                        
                        <div class="d-flex flex-row my-4">
                            <div class="mr-4">
                                <MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">@UserName.FirstOrDefault()</MudAvatar>
                            </div>
                            <div>
                                <MudText Typo="Typo.body1">@UserName</MudText>
                                <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@message.CreatedDate.ToLocalTime().ToString("dd MMM, yyyy hh:mm tt")</MudText>
                                <div style="display: grid; grid-template-columns: auto min-content min-content; gap: 0.5rem">
                                    @if(isEditing && editingId == message.Id.ToString())
                                    {
                                        <MudTextField @bind-Value="@message.Message"></MudTextField>
                                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Cancel" OnClick="@(()=> {isEditing = false; StateHasChanged();})" />
                                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Save" OnClick="@(async ()=> await UpdateMessage(message))" />
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body2" Style=" padding: 15px;background-color: var(--mud-palette-background-grey);border-radius: 5px;margin-top:5px">@message.Message</MudText>
                                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="@(()=> {isEditing = true; editingId = message.Id.ToString(); StateHasChanged();})" />
                                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="@(async ()=> await DeleteMessage(message.Id.ToString()))" />
                                    }
                                   

                                </div>
                            </div>
                        </div>
                    }
                </div>
                <MudPaper Elevation="25" Class="d-flex flex-row px-2 mx-4" Style="">
                    <MudTextField T="string" Placeholder="Enter your message..." DisableUnderLine="true" Class="mt-n2 mx-4"
                    @bind-Value="Message" />
                    <MudButton OnClick="SendMessage" StartIcon="@Icons.Material.Outlined.Send" Color="Color.Primary" ButtonType="ButtonType.Button">Send</MudButton>
                </MudPaper>


            }
        </MudPaper>

    }




</div>


@code {
    List<SensitiveMessage> AllMessages { get; set; } = new();

    string Message { get; set; } = string.Empty;


    string UserName { get; set; } = string.Empty;


    bool IsUserRegistered { get; set; } = false;

    bool isEditing {get; set; }= false;

    string editingId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetAllData();
    }

    async Task SendMessage()
    {
        SensitiveMessage toAdd = new();


        toAdd.Message = Message;

        bool r = await ApiRepo.CreateSensitiveMessage(toAdd);

        if (!r)
        {
            Snackbar.Add("Could not save message!", Severity.Error);
        }
        else
        {
            Snackbar.Add("Success!", Severity.Success);
            Message = string.Empty;
            await GetAllData();

        }



    }

    async Task DeleteMessage(string id)
    {
        bool r = await ApiRepo.DeleteSensitiveMessage(id);

        if (!r)
        {
            Snackbar.Add("Could not delete message!", Severity.Error);
        }
        else
        {
            Snackbar.Add("Success!", Severity.Success);
            await GetAllData();

        }
    }

    async Task UpdateMessage(SensitiveMessage message)
    {
        bool r = await ApiRepo.UpdateSensitiveMessage(message);

        if (!r)
        {
            Snackbar.Add("Could not update message!", Severity.Error);
        }
        else
        {
            Snackbar.Add("Success!", Severity.Success);
            isEditing = false;
            editingId = string.Empty;
            await GetAllData();

        }
    }

    bool IsDataLoading { get; set; } = false;

    async Task GetAllData()
    {
        IsDataLoading = true;
        StateHasChanged();


        AllMessages = await ApiRepo.GetAllSensitiveMessages();

        if (AllMessages == null)
        {
            AllMessages = new();
            Snackbar.Add("Error retrieving messages!", Severity.Error);
        }

        IsDataLoading = false;
        StateHasChanged();
    }
}